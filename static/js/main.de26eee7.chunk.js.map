{"version":3,"sources":["utils/typedHooks.ts","assets/loader.svg","utils/colors.ts","app/components/loaders/LoaderFullScreen.tsx","app/components/header/Header.tsx","app/pages/StartPage.tsx","app/components/inputs/Checkbox.tsx","app/components/inputs/Radio.tsx","api/api.ts","redux/reducers/main.ts","app/components/question/Question.tsx","app/pages/QuizPage.tsx","app/pages/ResultsPage.tsx","app/App.tsx","redux/store.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","colors","primaryBrownDark","basicWhite","primaryIndigo900","indigo","primaryIndigo800","dangerRed600","red","okGreen600","green","okGreen100","easy","medium","amber","hard","LoaderStyled","styled","div","LoaderFullScreen","className","src","loader","alt","HeaderStyled","header","Header","PageStyled","section","StartPage","history","useHistory","answers","state","main","Button","variant","color","size","onClick","push","length","Checkbox","input","label","meta","inputProps","id","name","htmlFor","style","cursor","RadioComp","Radio","value","base","axios","create","baseURL","api","get","then","res","data","results","catch","e","alert","message","SET_IS_QUESTIONS","SET_QUESTIONS","SET_CUR_QUESTION","SET_ANSWERS","SET_IS_RESULTS","RESET_STATE","initialState","isQuestions","questions","curQuestion","isResults","setIsQuestions","payload","type","setAnswers","handleAnswers","answer","dispatch","getState","nextQuestion","batch","QuestionStyled","Question","category","difficulty","question","correct_answer","incorrect_answers","curQ","sort","Math","random","decode","text","document","createElement","innerHTML","innerText","onSubmit","answArr","Object","keys","map","d","replace","values","render","handleSubmit","form","pristine","dis","every","val","opt","component","submit","reset","disabled","QuizPage","to","Stepper","activeStep","step","i","Step","completed","StepLabel","ResultStyled","correct","ResultsPage","q","find","answ","toString","isCorrect","summary","reduce","sum","result","AppStyled","App","useEffect","a","exact","path","store","configureStore","reducer","action","window","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.de26eee7.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\nimport type { TState, TDispatch } from '../redux/store'\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<TDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<TState> = useSelector","export default __webpack_public_path__ + \"static/media/loader.8193f7d9.svg\";","import indigo from \"@material-ui/core/colors/indigo\";\nimport green from \"@material-ui/core/colors/green\";\nimport amber from \"@material-ui/core/colors/amber\";\nimport red from \"@material-ui/core/colors/red\";\n\nexport const colors = {\n  primaryBrownDark: \"#363636\",\n  basicWhite: \"#ffffff\",\n\n  primaryIndigo900: indigo[900],\n  primaryIndigo800: indigo[800],\n\n  dangerRed600: red[600],\n  okGreen600: green[600],\n  okGreen100: green[100],\n\n  easy: green[100],\n  medium: amber[100],\n  hard: red[100],\n};\n","import { FC } from \"react\";\nimport styled from \"styled-components\";\n\nimport loader from \"../../../assets/loader.svg\";\n\nimport { colors } from \"../../../utils/colors\";\n\nconst LoaderStyled = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100vw;\n  height: 100vh;\n\n  .loading_svg {\n    width: 40px;\n    height: 40px;\n    margin-right: 8px;\n  }\n\n  .loading_text {\n    font-size: 16px;\n    font-weight: 600;\n    color: ${colors.primaryBrownDark};\n  }\n`;\n\nexport const LoaderFullScreen: FC = () => {\n  return (\n    <LoaderStyled>\n      <img className=\"loading_svg\" src={loader} alt=\"\" />\n      <div className=\"loading_text\">Loading</div>\n    </LoaderStyled>\n  );\n};\n","import { FC } from \"react\";\nimport styled from \"styled-components\";\n\nimport { colors } from \"../../../utils/colors\";\n\nconst HeaderStyled = styled.header`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  height: 120px;\n  padding: 0 32px;\n  border-radius: 4px;\n  background-color: ${colors.primaryIndigo800};\n\n  .title {\n    color: ${colors.basicWhite};\n    font-size: 22px;\n    font-weight: 900;\n    user-select: none;\n  }\n\n  @media (min-width: 480px) {\n    .title {\n      font-size: 32px;\n    }\n  }\n\n  @media (min-width: 768px) {\n    .title {\n      font-size: 48px;\n    }\n  }\n`;\n\nexport const Header: FC = () => {\n  return (\n    <HeaderStyled>\n      <h1 className=\"title\">IT'S QUIZ TIME!</h1>\n    </HeaderStyled>\n  );\n};\n","import { FC } from \"react\";\nimport { useHistory } from \"react-router\";\nimport styled from \"styled-components\";\nimport { useAppSelector } from \"../../utils/typedHooks\";\n\nimport { Button } from \"@material-ui/core\";\n\nconst PageStyled = styled.section`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  height: 120px;\n  padding: 32px 0;\n\n  .notation {\n    text-align: center;\n    margin-bottom: 32px;\n  }\n`;\n\nexport const StartPage: FC = () => {\n  const history = useHistory();\n  const { answers } = useAppSelector((state) => state.main);\n\n  return (\n    <PageStyled>\n      <h2 className=\"notation\">You will be given 10 questiions!</h2>\n      <p className=\"notation\">Don't hesitate and push the button:</p>\n\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        size=\"large\"\n        onClick={() => history.push(\"/quiz\")}\n      >\n        {answers.length > 0 ? \"CONTINUE\" : \"PUSH TO START\"}\n      </Button>\n    </PageStyled>\n  );\n};\n","import { FC } from \"react\";\nimport ChBox from \"@material-ui/core/Checkbox\";\n\nimport { FieldRenderProps } from \"react-final-form\";\n\ntype ICheckbox = FieldRenderProps<boolean, any>;\n\nexport const Checkbox: FC<ICheckbox> = ({ input, meta, label }) => {\n  // console.log(props);\n  return (\n    <div>\n      <ChBox\n        {...input}\n        inputProps={{ \"aria-label\": \"primary checkbox\" }}\n        id={input.name}\n      />\n\n      <label htmlFor={input.name} style={{ cursor: \"pointer\" }}>\n        {label}\n      </label>\n    </div>\n  );\n};\n","import { FC } from \"react\";\nimport Radio from \"@material-ui/core/Radio\";\n\nimport { FieldRenderProps } from \"react-final-form\";\n\ntype IRadio = FieldRenderProps<string, any>;\n\nexport const RadioComp: FC<IRadio> = ({ input, meta }) => {\n//   console.log(input);\n  return (\n    <div>\n      <Radio {...input} id={input.value} />\n\n      <label htmlFor={input.value} style={{ cursor: \"pointer\" }}>\n        {input.value}\n      </label>\n    </div>\n  );\n};\n","import axios from \"axios\";\n\nconst base = axios.create({\n  baseURL: \"https://opentdb.com/api.php?amount=10\",\n});\n\nexport const api = {\n  getQuestions: () =>\n    base\n      .get(\"\")\n      .then((res) => res.data.results)\n      .catch((e) => alert(`Ошибка ${e.name}: ${e.message}`)),\n};\n","import { Reducer, AnyAction } from \"redux\";\nimport { batch } from \"react-redux\";\nimport { api } from \"../../api/api\";\n\nimport type {\n  IQuestion,\n  IAnswer,\n  IMainState,\n  TAction,\n  TThunk,\n} from \"../../types/types\";\n\nconst SET_IS_QUESTIONS = \"main/SET_IS_QUESTIONS\";\nconst SET_QUESTIONS = \"main/SET_QUESTIONS\";\nconst SET_CUR_QUESTION = \"main/SET_CUR_QUESTION\";\nconst SET_ANSWERS = \"main/SET_ANSWERS\";\nconst SET_IS_RESULTS = \"main/SET_IS_RESULTS\";\nconst RESET_STATE = \"main/RESET_STATE\";\n\nconst initialState: IMainState = {\n  isQuestions: false,\n  questions: [],\n  curQuestion: 0,\n  answers: [],\n  isResults: false,\n};\n\nexport const main: Reducer<IMainState, AnyAction> = (\n  state = initialState,\n  action\n) => {\n  switch (action.type) {\n    case SET_IS_QUESTIONS:\n      return { ...state, isQuestions: action.payload };\n\n    case SET_QUESTIONS:\n      return { ...state, questions: action.payload };\n\n    case SET_CUR_QUESTION:\n      return { ...state, curQuestion: action.payload };\n\n    case SET_ANSWERS:\n      return { ...state, answers: action.payload };\n\n    case SET_IS_RESULTS:\n      return { ...state, isResults: action.payload };\n\n    case RESET_STATE:\n      return { ...initialState };\n\n    default:\n      return state;\n  }\n};\n\n// ACTIONS\n\nconst setIsQuestions: TAction<boolean> = (payload) => ({\n  type: SET_IS_QUESTIONS,\n  payload,\n});\n\nconst setQuestions: TAction<IQuestion[] | []> = (payload) => ({\n  type: SET_QUESTIONS,\n  payload,\n});\n\nconst setCurQuestion: TAction<number> = (payload) => ({\n  type: SET_CUR_QUESTION,\n  payload,\n});\n\nconst setAnswers: TAction<IAnswer[] | []> = (payload) => ({\n  type: SET_ANSWERS,\n  payload,\n});\n\nconst setIsResults: TAction<boolean> = (payload) => ({\n  type: SET_IS_RESULTS,\n  payload,\n});\n\nexport const resetState: TAction<null> = (payload) => ({\n  type: RESET_STATE,\n  payload,\n});\n\n// THUNKS\n\nexport const getQuestions = (): TThunk => async (dispatch) => {\n  const questions: IQuestion[] = await api.getQuestions();\n\n  batch(() => {\n    dispatch(setQuestions(questions));\n    dispatch(setIsQuestions(true));\n  });\n};\n\nexport const handleAnswers = (answer: any): TThunk => {\n  return (dispatch, getState) => {\n    const answers: IAnswer[] = [...getState().main.answers, answer];\n    const nextQuestion: number = answers.length;\n\n    if (nextQuestion < 10) {\n      batch(() => {\n        dispatch(setAnswers(answers));\n        dispatch(setCurQuestion(nextQuestion));\n      });\n    }\n\n    if (nextQuestion >= 10) {\n      batch(() => {\n        dispatch(setAnswers(answers));\n        dispatch(setIsResults(true));\n      });\n    }\n  };\n};\n","import { FC } from \"react\";\nimport { Form, Field } from \"react-final-form\";\nimport styled from \"styled-components\";\nimport { useAppDispatch } from \"../../../utils/typedHooks\";\n\nimport { Button } from \"@material-ui/core\";\nimport { Checkbox } from \"../inputs/Checkbox\";\nimport { RadioComp } from \"../inputs/Radio\";\n\nimport { handleAnswers } from \"../../../redux/reducers/main\";\n\nimport { colors } from \"../../../utils/colors\";\n\nimport type { IQuestion } from \"../../../types/types\";\n\ninterface IQuestionStyled {\n  color: string;\n}\ninterface IQRender extends IQuestion {\n  curQ: number;\n}\n\nconst QuestionStyled = styled.div<IQuestionStyled>`\n  padding: 0 32px;\n\n  .title {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    height: 120px;\n\n    &_difficulty {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      width: fit-content;\n      height: 40px;\n      margin-left: 32px;\n      padding: 0 16px;\n      border-radius: 4px;\n      background-color: ${({ color }) => color};\n    }\n  }\n\n  .options {\n    &_buttons {\n      margin-top: 48px;\n    }\n  }\n`;\n\nexport const Question: FC<IQRender> = ({\n  category,\n  type,\n  difficulty,\n  question,\n  correct_answer,\n  incorrect_answers,\n  curQ,\n}) => {\n  // console.log(curQ);\n\n  const dispatch = useAppDispatch();\n\n  const color = {\n    easy: colors.easy,\n    medium: colors.medium,\n    hard: colors.hard,\n  };\n\n  const answers = [...incorrect_answers, correct_answer].sort(\n    () => Math.random() - 0.5\n  );\n\n  const onSubmit = (data: any) => {\n    let answer = null;\n\n    if (type === \"multiple\") {\n      const answArr = Object.keys(data).map((d) => d.replace(\"OpTiOn\", \"\"));\n      answer = { question: question, answer: answArr };\n    }\n\n    if (type === \"boolean\") {\n      answer = { question: question, answer: Object.values(data) };\n    }\n\n    dispatch(handleAnswers(answer));\n  };\n\n  const decode = (text: string) => {\n    const div = document.createElement(\"div\");\n    div.innerHTML = text;\n    return div.innerText;\n  };\n\n  return (\n    <QuestionStyled color={color[difficulty]}>\n      <div className=\"title\">\n        <h3 className=\"title_question\">{decode(question)}</h3>\n        <div className=\"title_difficulty\">{difficulty}</div>\n      </div>\n\n      <Form\n        onSubmit={onSubmit}\n        render={({ handleSubmit, form, pristine, values }) => {\n          const dis: boolean =\n            pristine ||\n            (type === \"multiple\"\n              ? Object.values(values).every((val) => val === false)\n              : false);\n\n          const submitter = () => {\n            form.submit();\n            form.reset();\n          };\n\n          return (\n            <form className=\"options\" onSubmit={handleSubmit}>\n              {type === \"multiple\" &&\n                answers.map((opt) => (\n                  <Field\n                    name={`OpTiOn${opt}`}\n                    label={decode(opt)}\n                    type=\"checkbox\"\n                    component={Checkbox}\n                    key={`OpTiOn${opt}`}\n                  />\n                ))}\n\n              {type === \"boolean\" &&\n                answers.map((opt) => (\n                  <Field\n                    name={\"boolean\"}\n                    type=\"radio\"\n                    value={opt}\n                    component={RadioComp}\n                    key={opt}\n                  />\n                ))}\n\n              <div className=\"options_buttons\">\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  size=\"large\"\n                  onClick={submitter}\n                  disabled={dis}\n                >\n                  {curQ < 9 ? \"NEXT QUESTION\" : \"WATCH RESULTS\"}\n                </Button>\n              </div>\n            </form>\n          );\n        }}\n      />\n    </QuestionStyled>\n  );\n};\n","import { FC } from \"react\";\nimport styled from \"styled-components\";\nimport { Redirect } from \"react-router-dom\";\nimport { useAppSelector } from \"../../utils/typedHooks\";\n\nimport Stepper from \"@material-ui/core/Stepper\";\nimport Step from \"@material-ui/core/Step\";\nimport StepLabel from \"@material-ui/core/StepLabel\";\nimport { Question } from \"../components/question/Question\";\n\nconst PageStyled = styled.section``;\n\nexport const QuizPage: FC = () => {\n  const { questions, curQuestion, answers } = useAppSelector(\n    (state) => state.main\n  );\n\n  const question = { ...questions[curQuestion], curQ: curQuestion };\n\n  if (answers.length >= 10) return <Redirect to=\"results\" />;\n\n  return (\n    <PageStyled>\n      <Stepper activeStep={curQuestion}>\n        {questions.map((step, i) => (\n          <Step key={step.question} completed={i < curQuestion}>\n            <StepLabel></StepLabel>\n          </Step>\n        ))}\n      </Stepper>\n\n      <Question {...question} />\n    </PageStyled>\n  );\n};\n","import { FC } from \"react\";\nimport styled from \"styled-components\";\nimport { Redirect, useHistory } from \"react-router-dom\";\nimport { useAppDispatch, useAppSelector } from \"../../utils/typedHooks\";\n\nimport { resetState } from \"../../redux/reducers/main\";\n\nimport { Button } from \"@material-ui/core\";\n\nimport { colors } from \"../../utils/colors\";\n\nimport type { IQuestion } from \"../../types/types\";\n\ninterface IResult extends IQuestion {\n  isCorrect: boolean;\n  answer: string | undefined;\n}\n\ninterface IResultStyled {\n  correct: boolean;\n}\n\nconst PageStyled = styled.section`\n  padding: 32px;\n\n  .summary {\n    margin-bottom: 32px;\n    text-align: center;\n  }\n\n  .buttons {\n    display: flex;\n    justify-content: center;\n    margin-top: 32px;\n    margin-bottom: 32px;\n  }\n`;\n\nconst ResultStyled = styled.div<IResultStyled>`\n  margin-bottom: 24px;\n  padding: 16px;\n  border-radius: 4px;\n  border: 2px solid\n    ${({ correct }) => (correct ? colors.okGreen600 : colors.dangerRed600)};\n  background-color: ${({ correct }) =>\n    correct ? colors.okGreen100 : colors.basicWhite};\n\n  .question {\n    margin-bottom: 24px;\n  }\n\n  .answers_string {\n    margin-bottom: 16px;\n  }\n`;\n\nexport const ResultsPage: FC = () => {\n  const history = useHistory();\n  const dispatch = useAppDispatch();\n  const { questions, answers } = useAppSelector((state) => state.main);\n\n  const results: IResult[] = questions.map((q) => {\n    const answer = answers\n      .find((answ) => answ.question === q.question)\n      ?.answer.toString();\n\n    return { ...q, answer, isCorrect: answer === q.correct_answer };\n  });\n\n  const summary = results.reduce((sum: number, q) => {\n    return sum + (q.isCorrect ? 1 : 0);\n  }, 0);\n\n  const decode = (text: any) => {\n    const div = document.createElement(\"div\");\n    div.innerHTML = text;\n    return div.innerText;\n  };\n\n  const restart = () => {\n    dispatch(resetState(null));\n    history.push(\"/\");\n  };\n\n  if (answers.length < 10) return <Redirect to=\"/\" />;\n\n  return (\n    <PageStyled>\n      <h2 className=\"summary\">{`${summary} answer out of ${results.length} is correct!`}</h2>\n\n      {results.map((result, i) => (\n        <ResultStyled correct={result.isCorrect} key={result.question}>\n          <h3 className=\"question\">{`${i + 1}. ${decode(result.question)}`}</h3>\n\n          <p className=\"answers_string\">{`Your answer: ${decode(\n            result.answer\n          )}`}</p>\n\n          {!result.isCorrect && (\n            <p className=\"answers_string\">{`Correct answer: ${decode(\n              result.correct_answer\n            )}`}</p>\n          )}\n        </ResultStyled>\n      ))}\n\n      <div className=\"buttons\">\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          size=\"large\"\n          onClick={restart}\n        >\n          TRY AGAIN\n        </Button>\n      </div>\n    </PageStyled>\n  );\n};\n","import { FC, useEffect } from \"react\";\nimport { Switch, Route, useHistory } from \"react-router-dom\";\nimport { useAppDispatch, useAppSelector } from \"../utils/typedHooks\";\nimport styled from \"styled-components\";\n\nimport { LoaderFullScreen } from \"./components/loaders/LoaderFullScreen\";\nimport { Header } from \"./components/header/Header\";\nimport { StartPage } from \"./pages/StartPage\";\nimport { QuizPage } from \"./pages/QuizPage\";\nimport { ResultsPage } from \"./pages/ResultsPage\";\n\nimport { getQuestions } from \"../redux/reducers/main\";\n\nimport { colors } from \"../utils/colors\";\n\nconst AppStyled = styled.main`\n  max-width: 1280px;\n  min-width: 768px;\n  margin: 0 auto;\n  color: ${colors.primaryBrownDark};\n`;\n\nexport const App: FC = () => {\n  const dispatch = useAppDispatch();\n  const history = useHistory();\n  const { isQuestions, isResults } = useAppSelector((state) => state.main);\n\n  useEffect(() => {\n    if (!isQuestions) dispatch(getQuestions());\n  }, [dispatch, isQuestions]);\n\n  useEffect(() => {\n    if (isResults) history.push(\"/results\");\n  }, [isResults, history]);\n\n  if (!isQuestions) return <LoaderFullScreen />;\n\n  return (\n    <AppStyled>\n      <Header />\n\n      <Switch>\n        <Route exact path=\"/\" render={() => <StartPage />} />\n        <Route path=\"/quiz\" render={() => <QuizPage />} />\n        <Route path=\"/results\" render={() => <ResultsPage />} />\n      </Switch>\n    </AppStyled>\n  );\n};\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { main } from \"./reducers/main\";\n\nexport const store = configureStore({ reducer: { main } });\n\nexport type TState = ReturnType<typeof store.getState>;\nexport type TDispatch = typeof store.dispatch;\n\n(window as any).store = store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\"; // BrowserRouter\nimport { Provider } from \"react-redux\";\nimport { App } from \"./app/App\";\nimport { store } from \"./redux/store\";\n\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}